// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: SpyPipeGRPC.proto

#include "SpyPipeGRPC.pb.h"
#include "SpyPipeGRPC.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace spy_pipe_pkg {

static const char* SpyPipeGRPC_method_names[] = {
  "/spy_pipe_pkg.SpyPipeGRPC/SendData",
};

std::unique_ptr< SpyPipeGRPC::Stub> SpyPipeGRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SpyPipeGRPC::Stub> stub(new SpyPipeGRPC::Stub(channel));
  return stub;
}

SpyPipeGRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendData_(SpyPipeGRPC_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::spy_pipe_pkg::Data, ::spy_pipe_pkg::Data>* SpyPipeGRPC::Stub::SendDataRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::spy_pipe_pkg::Data, ::spy_pipe_pkg::Data>::Create(channel_.get(), rpcmethod_SendData_, context);
}

void SpyPipeGRPC::Stub::experimental_async::SendData(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::spy_pipe_pkg::Data,::spy_pipe_pkg::Data>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::spy_pipe_pkg::Data,::spy_pipe_pkg::Data>::Create(stub_->channel_.get(), stub_->rpcmethod_SendData_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::spy_pipe_pkg::Data, ::spy_pipe_pkg::Data>* SpyPipeGRPC::Stub::AsyncSendDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::spy_pipe_pkg::Data, ::spy_pipe_pkg::Data>::Create(channel_.get(), cq, rpcmethod_SendData_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::spy_pipe_pkg::Data, ::spy_pipe_pkg::Data>* SpyPipeGRPC::Stub::PrepareAsyncSendDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::spy_pipe_pkg::Data, ::spy_pipe_pkg::Data>::Create(channel_.get(), cq, rpcmethod_SendData_, context, false, nullptr);
}

SpyPipeGRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpyPipeGRPC_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SpyPipeGRPC::Service, ::spy_pipe_pkg::Data, ::spy_pipe_pkg::Data>(
          [](SpyPipeGRPC::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::spy_pipe_pkg::Data,
             ::spy_pipe_pkg::Data>* stream) {
               return service->SendData(ctx, stream);
             }, this)));
}

SpyPipeGRPC::Service::~Service() {
}

::grpc::Status SpyPipeGRPC::Service::SendData(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::spy_pipe_pkg::Data, ::spy_pipe_pkg::Data>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace spy_pipe_pkg

